
#!/bin/bash
set -e

# 유저와 DB 생성, 권한 부여, db와 유저 변경, 스키마와 테이블 생성.
# 데이터 디렉토리가 비어있어야 실행됨.
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
	CREATE USER docker_user PASSWORD '12321';
    CREATE DATABASE docker_db;
	GRANT ALL PRIVILEGES ON DATABASE docker_db TO docker_user;
    \c docker_db docker_user;
    CREATE SCHEMA docker_schema;
    CREATE TABLE docker_schema.user (
        id serial PRIMARY KEY,
        account_name varchar(20) NOT NULL UNIQUE
    );
    CREATE TABLE docker_schema.phone (
        phone varchar(13),
        id integer REFERENCES docker_schema.user (id),
        PRIMARY KEY (phone)
    );
EOSQL
    

# psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
# 	CREATE USER docker;
# 	CREATE DATABASE docker;
# 	GRANT ALL PRIVILEGES ON DATABASE docker TO docker;
# EOSQL

# CREATE DATABASE docker_db WITH OWNER docker_user;
# docker_user가 소유자인 데이터베이스 docker_db 생성.
# 권한 부여 없이 테이블 생성 가능.
# 수퍼유저 postgres도 이것저것 만들기 가능.

# 자동증가id 생성
# CREATE TABLE docker_schema.user(id SERIAL PRIMARY KEY, b INTEGER);
# CREATE TABLE docker_schema.user(id INTEGER ALWAYS AS IDENTITY, b INTEGER);
# CREATE TABLE docker_schema.user(id INTEGER GENERATED BY DEFAULT AS IDENTITY, b INTEGER);


# PK, FK 설정 예시
# CREATE TABLE docker_schema.user (
#     id serial PRIMARY KEY,
#     account_name integer NOT NULL
# );

# CREATE TABLE docker_schema.user (
#     id serial,
#     account_name integer NOT NULL,
#     PRIMARY KEY(id)
# );

# CREATE TABLE docker_schema.phone (
#     id integer REFERENCES docker_schema.user (id),
#     phone varchar(13) NOT NULL,
#     UNIQUE (id, phone)
# );

# CREATE TABLE docker_schema.phone (
#     id integer REFERENCE docker_schema.user (id),
#     phone varchar(13) NOT NULL,
#     FOREIGN KEY (id) REFERENCES docker_schema.user (id),
#     UNIQUE (id, phone)    
# );
